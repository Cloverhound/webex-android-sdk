package com.cisco.spark.android.core;

import android.text.TextUtils;

import com.cisco.spark.android.authenticator.OAuth2AccessToken;
import com.cisco.spark.android.authenticator.OAuth2Tokens;
import com.cisco.spark.android.model.Actor;
import com.cisco.spark.android.sync.ActorRecord;

import java.util.Locale;

public class AuthenticatedUser implements Actor {
    private static final String CONSUMER_ORG_ID = "consumer";
    // Used to identify a test machine user
    private static final String TYPE_MACHINE = "MACHINE";
    public static final String DARLING_MACHINE = "DARLING";
    private final String email;
    private final boolean machine;
    private String displayName;
    private final String department;
    private String orgId;
    private long created;
    private OAuth2Tokens tokens;
    private OAuth2AccessToken conversationTokens;
    private OAuth2AccessToken kmsTokens;
    private String userId;

    public AuthenticatedUser(String email, ActorRecord.ActorKey actorKey, String displayName, OAuth2Tokens oAuth2Tokens, String department, String orgId, long created, String type) {
        this.userId = actorKey.getUuid();
        this.email = email.toLowerCase(Locale.getDefault());
        this.displayName = displayName;
        this.tokens = oAuth2Tokens;
        this.department = department;
        this.orgId = orgId;
        this.created = created;
        machine = TYPE_MACHINE.equals(type) || DARLING_MACHINE.equals(type);
    }

    @Override
    public String getEmail() {
        return email;
    }

    public void setUserId(ActorRecord.ActorKey actorKey) {
        userId = actorKey.getUuid();
    }

    public String getUserId() {
        return userId;
    }

    @Override
    public String getDisplayName() {
        return (displayName != null) ? displayName : email;
    }

    public OAuth2Tokens getOAuth2Tokens() {
        return tokens;
    }

    public String getDepartment() {
        return department;
    }

    public void setTokens(OAuth2AccessToken token) {
        this.tokens.update(token);
    }

    public void setKmsTokens(OAuth2AccessToken kmsTokens) {
        this.kmsTokens = kmsTokens;
    }

    public void setConversationTokens(OAuth2AccessToken conversationTokens) {
        this.conversationTokens = conversationTokens;
    }

    public ActorRecord.ActorKey getKey() {
        if (TextUtils.isEmpty(userId))
            return null;
        return new ActorRecord.ActorKey(userId);
    }

    public String getKmsAuthorizationHeader() {
        if (kmsTokens != null)
            return kmsTokens.getAuthorizationHeader();
        if (tokens != null)
            return tokens.getAuthorizationHeader();
        return null;
    }

    public String getConversationAuthorizationHeader() {
        if (conversationTokens != null)
            return conversationTokens.getAuthorizationHeader();
        if (tokens != null)
            return tokens.getAuthorizationHeader();
        return null;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public String getOrgId() {
        return orgId;
    }

    public void setOrgId(String orgId) {
        this.orgId = orgId;
    }

    public long getCreated() {
        return created;
    }

    public void setCreated(long created) {
        this.created = created;
    }

    public int tenureInDays() {
        return Math.round((System.currentTimeMillis() - this.created) / 86400000);
    }

    public boolean isExternal(String otherOrgId) {
        if (orgId == null || otherOrgId == null) // We don't have the necessary information, assume org is the same
            return false;
        if (isConsumer()) // Do not display external participants if we're in the consumer org
            return false;
        return !orgId.equals(otherOrgId);
    }

    public boolean isMachine() {
        return machine;
    }

    public boolean isConsumer() {
        return CONSUMER_ORG_ID.equals(orgId);
    }

    // Auto-generated by AndroidStudio

    @Override
    @SuppressWarnings("RedundantIfStatement")
    public boolean equals(Object o) {

        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        AuthenticatedUser that = (AuthenticatedUser) o;

        if (userId != null ? !userId.equals(that.userId) : that.userId != null) {
            return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return (userId != null ? userId.hashCode() : 0);
    }

    @Override
    public String toString() {
        return "AuthenticatedUser{" +
               "email='" + email + '\'' +
               ", machine=" + machine +
               ", displayName='" + displayName + '\'' +
               ", department='" + department + '\'' +
               ", orgId='" + orgId + '\'' +
               ", created=" + created +
               ", userId='" + userId + '\'' +
               '}';
    }
}
