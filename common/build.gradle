import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'checkstyle'

project.ext {
    // Property to store the ndk home value in
    androidNdkHome = null
}

def gitSha() {
    return 'git rev-parse --short HEAD'.execute([], file(".")).text.trim()
}

def getNdkBuild() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return new File(project.androidNdkHome, 'ndk-build.cmd')
    } else {
        return new File(project.androidNdkHome, 'ndk-build')
    }
}

// This task checks if you have ANDROID_NDK_HOME specified either in the
// ~/.gradle/gradle.properties file or as an environment variable and
// uses the latter if both is set.
task ndkCheck {

    if (project.hasProperty("ANDROID_NDK_HOME")) {
        project.androidNdkHome = project.property("ANDROID_NDK_HOME")
        println "[ndkcheck] ANDROID_NDK_HOME found in gradle.properties = " + project.androidNdkHome
    }
    if (System.getenv("ANDROID_NDK_HOME") != null) {
        project.androidNdkHome = System.getenv("ANDROID_NDK_HOME")
        println "[ndkcheck] ANDROID_NDK_HOME found in environment = " + project.androidNdkHome
        if (project.hasProperty("ANDROID_NDK_HOME")) {
            println "[ndkcheck] Environment variable overrides gradle.properties property"
        }
    }

    def error = 'set ANDROID_NDK_HOME in your ~/.gradle/gradle.properties or export as variable in environment. Current value: ' + project.androidNdkHome
    def ndkBuildError = 'NDK build tools not found in path: ' + project.androidNdkHome

    assert project.androidNdkHome != null: error
    assert getNdkBuild().exists(): ndkBuildError

    println "[ndkcheck] NDK path:      " + project.androidNdkHome
    try {
        def releaseFile = new File(project.androidNdkHome, 'RELEASE.txt')
        def text = releaseFile.text
        println "[ndkcheck] NDK Version:   android-ndk-" + text
    } catch (FileNotFoundException ignore) {
        // Safeguard, in case a version the sdk doesn't have the release file
    }
}

task buildNative(type: Exec, dependsOn: 'ndkCheck') {
    def ndkBuildingDir = new File("jni");
    commandLine getNdkBuild(), "--directory", ndkBuildingDir, "NDK_LIBS_OUT=../src/main/jniLibs", "NDK_TOOLCHAIN_VERSION=4.9"
}

tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn buildNative }



task cleanNative(type: Exec, dependsOn: 'ndkCheck') {
    def ndkBuildingDir = new File("jni");

    commandLine getNdkBuild(), "--directory", ndkBuildingDir, "NDK_LIBS_OUT=../src/main/jniLibs", "clean"
}

clean.dependsOn(cleanNative)

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    publishNonDefault true

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "REGION_API_URL", '"' + "https://ds.ciscospark.com" + '"'
        buildConfigField "String", "WX2_SERVICE_API_URL", '"' + (System.env.LOCUS_BASE_URL ?: "https://wdm-a.wbx2.com/wdm/api/v1") + '"'
        buildConfigField "String", "USERS_API_URL", '"' + (System.env.CONVERSATION_BASE_URL ?: "https://conv-a.wbx2.com/conversation/api/v1/") + '"'
        buildConfigField "String", "ATLAS_API_URL", '"' + "https://atlas-a.wbx2.com/admin/api/v1/" + '"'
        buildConfigField "String", "CALLIOPE_REGISTRAR_URL", '"' + "https://calliope-a.wbx2.com/calliope/api/registrar/v1" + '"'
        buildConfigField "String", "GIT_COMMIT_SHA", '"' + gitSha() + '"'
        buildConfigField "String", "WB_URL", '"https://whiteboard.cisco.com/integrated/index.html"'
        buildConfigField "String", "METRICS_API_URL", '"https://metrics-a.wbx2.com/metrics/api/v1/"'
        buildConfigField "String", "WB_ACL_URL", '"' + "https://acl-a.wbx2.com/acl/api/v1/" + '"'
        buildConfigField "String", "IDBROKER_TOKEN_URL", '"' + "https://idbroker.webex.com/idb/token/v1/" + '"'
        buildConfigField "String", "IDENTITY_API_URL", '"' + "https://identity.webex.com/identity/scim/v1/" + '"'


        buildConfigField "String", "PUBLICSDK", '"SDKEnabled"'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    productFlavors {
        prod {
            // Use the defaults
        }
        lollipop {
            minSdkVersion 21
        }
    }

    testOptions {

        unitTests {
            all {
                maxHeapSize = "2048m"
                maxParallelForks 1

                forkEvery 150
                ignoreFailures false

                testLogging {
                    if (project.hasProperty("DEBUG")) {
                        events "passed", "skipped", "failed", "standardOut", "standardError"
                        showStandardStreams = true
                    } else {
                        events "passed", "skipped", "failed"
                        showStandardStreams = false
                    }
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile 'junit:junit:4.12'

    compile libs.supportv13
    compile libs.supportannotation
    compile libs.appcompatv7
    compile libs.recyclerviewv7
    compile libs.cardviewv7
    compile libs.supportdesign
    compile libs.gridlayout

    compile libs.gson

    compile libs.dagger
    provided libs.daggercompiler

    compile libs.retrofit
    compile libs.retrofit_gsonconverter
    compile libs.retrofit_rxjava

    compile libs.okhttp
    compile libs.okhttp_logging

    compile libs.eventbus

    compile libs.spongycastle_prov
    compile libs.spongycastle_core
    compile libs.kms

    compile libs.ln

    compile libs.wmeaar

    compile libs.rxjava
    compile libs.rxandroid

    compile libs.will

    compile libs.sqlcipher

    compile libs.fasterxml_annotations
    compile libs.fasterxml_databind
    compile libs.fasterxml_core

    debugCompile libs.leak_canary
    releaseCompile libs.leak_canary_disabled
    testCompile libs.leak_canary_disabled
    androidTestCompile libs.leak_canary_disabled

    compile libs.rxrelay

    testCompile libs.junit
    testCompile libs.robolectric
    testCompile libs.robolectric_multidex
    testCompile libs.mockito
    compile 'joda-time:joda-time:2.9.9'
    compile 'com.cisco.wx2:diagnostic-events-gson:1.0.86'

    compile 'com.segment.analytics.android:analytics:4.3.0-RC1'
}

task styleCheck(type: Checkstyle) {
    configFile new File(rootDir, "checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/ConversationContract.java'

    classpath = files()
}
