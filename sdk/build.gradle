apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'

ext {
	moduleName = 'Spark Android SDK'

	moduleGroupId = 'com.ciscospark'
	moduleArtifactId = 'androidsdk'
	moduleVersion = '0.1.0'

	moduleDescription = 'Spark SDK for Android'
	
	moduleSiteUrl = 'https://developer.ciscospark.com/getting-started.html'
	moduleProjectUrl = 'https://github.com/ciscospark/spark-android-sdk'
	moduleGitUrl = 'https://github.com/ciscospark/spark-android-sdk/tree/master'
	moduleConnectionUrl = 'scm:git:git://github.com/ciscospark/spark-android-sdk.git'
	moduleDeveloperConnectionUrl = 'scm:git:ssh://github.com:ciscospark/spark-android-sdk.git'
	
	moduleLicenseName = 'MIT License'
	moduleLicenseURL = 'https://raw.githubusercontent.com/ciscospark/spark-android-sdk/master/LICENSE'
	moduleDeveloperId = 'devsupport'
	moduleDeveloperName = 'Cisco Spark for Developer'
	moduleDeveloperEmail = 'devsupport@ciscospark.com'
	moduleDeveloperOrganization = 'Cisco System Inc'
	moduleDeveloperOrganizationURL = 'https://www.ciscospark.com/'
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
	
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        testInstrumentationRunner "com.ciscospark.androidsdk.SparkTestRunner"
        multiDexEnabled true
	    versionName moduleVersion
    }

    buildTypes {
        release { 
			minifyEnabled true
        }
        debug {
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
        dexInProcess false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }

	if (JavaVersion.current().isJava8Compatible()) {
		tasks.withType(Javadoc) {
			// disable the crazy super-strict doclint tool in Java 8
			//noinspection SpellCheckingInspection
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	//generateReleaseJavadoc
	android.libraryVariants.all { variant ->
		task("generate${variant.name}Javadoc", type: Javadoc) {
			description "Generates Javadoc for $variant.name."
			source = variant.javaCompile.source
			ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
			classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
			options.encoding('UTF-8')
			options.setUse(true)
			options.author(true)
			options.version(true)
			options.windowTitle(moduleName + ' ' + moduleVersion)
			options.docTitle(moduleName + ' ' + moduleVersion)
			options.links("http://docs.oracle.com/javase/7/docs/api/");
			options.links("http://d.android.com/reference/");
			options.footer('Copyright &#169; 2016&#8211;2017 Cisco System Inc.  All Rights Reserved.')
			exclude '**/BuildConfig.java'
			exclude '**/R.java'
			exclude '**/internal/*.java'
			exclude '**/utils/**'
		}
	}
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId moduleGroupId
            artifactId moduleArtifactId
            version moduleVersion
            artifact "$buildDir/outputs/aar/sdk-debug.aar" //aar artifact you want to publish

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each { dependency ->
                    if (dependency.group?.trim()) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                        if (!dependency.transitive || dependency.name == 'common-lib') {
                            dependencyNode.appendNode('type', 'aar')
                        }
                    }
                }
	            asNode().children().last() + {
		            resolveStrategy = Closure.DELEGATE_FIRST
		            name moduleName
		            description moduleDescription
		            url moduleSiteUrl
		            scm {
			            url moduleGitUrl
			            connection moduleConnectionUrl
			            developerConnection moduleDeveloperConnectionUrl
		            }
		            licenses {
			            license {
				            name moduleLicenseName
				            url moduleLicenseURL
			            }
		            }
		            developers {
			            developer {
				            id moduleDeveloperId
				            name moduleDeveloperName
				            email moduleDeveloperEmail
				            organization moduleDeveloperOrganization
				            organizationUrl moduleDeveloperOrganizationURL
			            }
		            }
	            }
            }
        }
    }

    repositories{
        maven {
	        url "file:/${buildDir}/artifacts"
        }
    }
}

//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())

//bintray {
//	user = properties.getProperty("bintray.user")
//	key = properties.getProperty("bintray.apikey")
//	publications = ['maven']
//	pkg {
//		repo = 'SparkSDK'
//		name = 'spark-android-sdk'
//		userOrg = user
//		licenses = ['MIT']
//		vcsUrl = 'https://github.com/ciscospark/spark-android-sdk.git'
//		//labels = ['gear', 'gore', 'gorilla']
//		//publicDownloadNumbers = true
//		//attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
//		version {
//			name = '0.0.1-SNAPSHOT'
//			desc = 'Spark Android SDK 0.0.1 Snapshot'
//			//vcsTag = '1.3.0'
//			//attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
//			gpg { 
//				sign = true
//				passphrase = properties.getProperty("bintray.gpg.password")
//			}
//		}
//	}
//}





dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile('com.cisco.spark.android:common-lib:2.0.3886-SNAPSHOT@aar', {
        transitive = true
    })
    testCompile 'com.squareup.okhttp3:okhttp:3.9.0'
	testCompile 'com.squareup.okhttp3:mockwebserver:3.9.0'
	testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}
