apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"

version = '0.0.1'
group = 'com.ciscospark'

ext {
	bintrayRepo = 'maven'
	bintrayName = 'spark-android-sdk'

	publishedGroupId = 'com.ciscospark'
	libraryName = 'Spark Android SDK'
	artifact = 'androidsdk'

	libraryDescription = 'Spark Android SDK'

	siteUrl = 'https://developer.ciscospark.com/getting-started.html'
	gitUrl = 'https://github.com/ciscospark/spark-android-sdk.git'

	libraryVersion = '0.1'

	developerId = 'zhiyuliu'
	developerName = 'Zhiyu Liu'
	developerEmail = 'zhiyuliu@cisco.com'

	licenseName = 'MIT License'
	licenseUrl = 'https://raw.githubusercontent.com/ciscospark/spark-android-sdk/master/LICENSE'
	allLicenses = ["MIT"]
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
	
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "0.1"
        testInstrumentationRunner "com.ciscospark.androidsdk.SparkTestRunner"
        multiDexEnabled true
    }

    buildTypes {
        release { 
			minifyEnabled true
//          proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"

        dexInProcess false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }

	if (JavaVersion.current().isJava8Compatible()) {
		tasks.withType(Javadoc) {
			// disable the crazy super-strict doclint tool in Java 8
			//noinspection SpellCheckingInspection
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	//generateReleaseJavadoc
	android.libraryVariants.all { variant ->
		task("generate${variant.name}Javadoc", type: Javadoc) {
			description "Generates Javadoc for $variant.name."
			source = variant.javaCompile.source
			ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
			classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
			options.encoding('UTF-8')
			options.setUse(true)
			options.author(true)
			options.version(true)
			options.windowTitle('Spark Android SDK 0.1')
			options.docTitle('Spark Android SDK 0.1')
			options.links("http://docs.oracle.com/javase/7/docs/api/");
			options.links("http://d.android.com/reference/");
			options.footer('Copyright &#169; 2016&#8211;2017 Cisco System Inc.  All Rights Reserved.')
			exclude '**/BuildConfig.java'
			exclude '**/R.java'
			exclude '**/internal/*.java'
			exclude '**/utils/**'
		}
	}
}

install {
	repositories.mavenInstaller {
		// This generates POM.xml with proper parameters
		pom {
			project {
				packaging 'aar'
				groupId publishedGroupId
				artifactId artifact

				// Add your description here
				name libraryName
				description libraryDescription
				url siteUrl

				// Set your license
				licenses {
					license {
						name licenseName
						url licenseUrl
					}
				}
				developers {
					developer {
						id developerId
						name developerName
						email developerEmail
					}
				}
				scm {
					connection gitUrl
					developerConnection gitUrl
					url siteUrl

				}
			}
		}
	}
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.ciscospark'
            artifactId 'androidsdk'
            version '0.0.1'
            artifact "$buildDir/outputs/aar/sdk-debug.aar" //aar artifact you want to publish

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each { dependency ->
                    if (dependency.group?.trim()) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                        if (!dependency.transitive || dependency.name == 'common-lib') {
                            dependencyNode.appendNode('type', 'aar')
                        }
                    }
                }
            }
        }
    }

    repositories{
        maven {
            url "$buildDir/repo"
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
	user = properties.getProperty("bintray.user")
	key = properties.getProperty("bintray.apikey")
	publications = ['maven']
	pkg {
		repo = 'SparkSDK'
		name = 'spark-android-sdk'
		userOrg = user
		licenses = ['MIT']
		vcsUrl = 'https://github.com/ciscospark/spark-android-sdk.git'
		//labels = ['gear', 'gore', 'gorilla']
		//publicDownloadNumbers = true
		//attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
		version {
			name = '0.0.1'
			desc = 'Spark Android SDK 0.0.1 Snapshot'
			//vcsTag = '1.3.0'
			//attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
			gpg { 
				sign = true
				passphrase = properties.getProperty("bintray.gpg.password")
			}
		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile('com.cisco.spark.android:common-lib:2.0.3886-SNAPSHOT@aar', {
        transitive = true
    })
    testCompile 'com.squareup.okhttp3:okhttp:3.9.0'
	testCompile 'com.squareup.okhttp3:mockwebserver:3.9.0'
	testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}
